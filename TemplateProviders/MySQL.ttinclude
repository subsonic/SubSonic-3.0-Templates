<#@ include file="Settings.ttinclude" #>
<#@ assembly name="MySql.Data" #>
<#@ import namespace="MySql.Data.MySqlClient" #>
<#+
MySqlConnection conn;


List<FKTable> LoadFKTables(string tableName){
    string fkSQL=@"SELECT*
        FROM information_schema.KEY_COLUMN_USAGE
        WHERE
        (REFERENCED_TABLE_SCHEMA = (@schema)
        AND REFERENCED_TABLE_NAME =@table
        AND TABLE_NAME is not null
        )
        OR
        (TABLE_SCHEMA = (@schema)
        AND TABLE_NAME =@table
        AND REFERENCED_TABLE_NAME is not null
        )
        ORDER BY TABLE_NAME, COLUMN_NAME;";
    
    var result=new List<FKTable>();
    
    using(conn=new MySqlConnection(ConnectionString)){
        
        var cmd=new MySqlCommand(fkSQL,conn);
        cmd.Parameters.AddWithValue("@table",tableName);
        cmd.Parameters.AddWithValue("@schema",DatabaseName);
        conn.Open();
        var rdr=cmd.ExecuteReader(CommandBehavior.CloseConnection);
        
        while(rdr.Read()){
            FKTable fk=new FKTable();
            string thisTable=rdr["TABLE_NAME"].ToString();
            
            if(tableName.ToLower()==thisTable.ToLower()){
                fk.ThisTable=rdr["TABLE_NAME"].ToString();
                fk.ThisColumn=rdr["COLUMN_NAME"].ToString();
                fk.OtherTable=rdr["REFERENCED_TABLE_NAME"].ToString();
                fk.OtherColumn=rdr["REFERENCED_COLUMN_NAME"].ToString();
            
            }else{
                fk.ThisTable=rdr["REFERENCED_TABLE_NAME"].ToString();
                fk.ThisColumn=rdr["REFERENCED_COLUMN_NAME"].ToString();
                fk.OtherTable=rdr["TABLE_NAME"].ToString();
                fk.OtherColumn=rdr["COLUMN_NAME"].ToString();
          
            }
            
            fk.OtherClass=Inflector.MakeSingular(CleanUp(fk.OtherTable));
            fk.OtherQueryable=Inflector.MakePlural(fk.OtherClass);
            
            result.Add(fk);
        }
        
    
    }    

    return result;
    
    
}


List<Table> LoadTables(){

    var result=new List<Table>();
    
    using(conn=new MySqlConnection(ConnectionString)){
        conn.Open();
        
        //this will return everything for the DB
        var schema  = conn.GetSchema("COLUMNS");
        conn.Close();
        
        //spin through once to get all the tables
        foreach (DataRow row in schema.Rows)
        {
            if(!result.Any(x=>x.Name.Equals(row["TABLE_NAME"].ToString(),StringComparison.InvariantCultureIgnoreCase)))
            {

                //add it
                Table tbl = new Table();
                tbl.PrimaryKey="";
                tbl.Name = row["TABLE_NAME"].ToString();
                tbl.FKTables=LoadFKTables(tbl.Name);
                tbl.CleanName=CleanUp(tbl.Name);
                tbl.ClassName=Inflector.MakeSingular(tbl.CleanName);
                tbl.QueryableName=Inflector.MakePlural(tbl.ClassName);
                result.Add(tbl);
            }
        }
        
        //loop again - but this time pull by table name
        foreach (var item in result) {
            item.Columns=new List<Column>();
            //pull the columns from the schema
            var columns = schema.Select("TABLE_NAME='" + item.Name + "'");

            foreach (var row in columns) {
                Column col=new Column();
                col.Name=row["COLUMN_NAME"].ToString();
                col.CleanName=CleanUpColName(col.Name,tbl);
                col.DataType=row["DATA_TYPE"].ToString();
                
                /* Pass the information whether Data Type Unsigned or Not **/
                if (row["COLUMN_TYPE"].ToString().Contains("unsigned"))
                {
                    col.DbType=GetDbType(col.DataType+" unsigned");    
                    col.SysType=GetSysType(col.DataType+" unsigned");
                }
                else{
                    col.DbType=GetDbType(col.DataType);
                    col.SysType=GetSysType(col.DataType);
                }
 
                if (TreatTinyint1AsBool && row["COLUMN_TYPE"].ToString() == "tinyint(1)") {
                    col.SysType = "bool";
                    col.DbType = DbType.Boolean;
                }

                col.AutoIncrement=row["EXTRA"].ToString()=="auto_increment";
                col.IsNullable=row["IS_NULLABLE"].ToString()=="YES";
                col.IsPK=row["COLUMN_KEY"].ToString()=="PRI";
                
                if(col.IsPK){
                    item.PrimaryKey=col.Name ?? "";
                }
                
                int.TryParse(row["CHARACTER_MAXIMUM_LENGTH"].ToString(),out col.MaxLength);
                
                item.Columns.Add(col);
            
            }
        }
    }
    
    return result;
}

string GetSysType(string sqlType){
	string sysType="string";
	switch (sqlType) {
	    case "bigint unsigned":
			sysType= "ulong";
			break;
		case "bigint":
			sysType= "long";
			break;
	    case "mediumint unsigned":
	    case "int unsigned":
			sysType= "uint";
			break;
	    case "mediumint":
		case "int":
			sysType= "int";
			break;
	    case "smallint unsigned":
	        sysType= "ushort";
			break;
		case "smallint":
			sysType= "short";
			break;
		case "guid":
			sysType=  "Guid";
			 break;
		case "smalldatetime":
		case "date":
		case "datetime":
		case "timestamp":
			sysType=  "DateTime";
			  break;
		case "float":
			sysType="double";
			break;
		case "real":
		case "numeric":
		case "smallmoney":
		case "decimal unsigned":
		case "decimal":
		case "money":
			sysType=  "decimal";
			 break;
	    case "tinyint unsigned":
	          sysType=  "byte";
			  break;
		case "tinyint":
		        sysType=  "sbyte";
			   break;
		case "bit":
			sysType=  "bool";
			   break;
	    case "longblob":
		case "image":
		case "binary":
		case "varbinary":
			sysType=  "byte[]";
			 break;
	}
	return sysType;
}
DbType GetDbType(string sqlType){
	switch(sqlType)
    {
        case "varchar":
            return DbType.AnsiString;
        case "nvarchar":
            return DbType.String;
        case "mediumint unsigned":
        case "int unsigned":
        case "integer unsigned":
            return DbType.UInt32;
        case "mediumint":
        case "int":
        case "integer":
            return DbType.Int32;
        case "guid":
            return DbType.Guid;
        case "date":
        case "timestamp":
        case "datetime":
            return DbType.DateTime;
        case "bigint unsigned":
            return DbType.UInt64;
        case "bigint":
            return DbType.Int64;
        case "binary":
            return DbType.Binary;
        case "bit":
            return DbType.Boolean;
        case "char":
            return DbType.AnsiStringFixedLength;
        case "decimal":
            return DbType.Decimal;
        case "float":
        case "double":
            return DbType.Double;
        case "image":
            return DbType.Binary;
        case "money":
            return DbType.Currency;
        case "nchar":
            return DbType.String;
        case "longtext":
            return DbType.String;
        case "longblob":
            return DbType.Object;
        case "numeric":
            return DbType.Decimal;
        case "real":
            return DbType.Single;
        case "smalldatetime":
            return DbType.DateTime;
        case "smallint unsigned":
            return DbType.UInt16;
        case "smallint":
            return DbType.Int16;
        case "smallmoney":
            return DbType.Currency;
        case "sql_variant":
            return DbType.String;
        case "sysname":
            return DbType.String;
        case "text":
            return DbType.AnsiString;
       case "tinyint unsigned":
            return DbType.Byte;            
        case "tinyint":
            return DbType.SByte;
        case "varbinary":
            return DbType.Binary;
        default:
            return DbType.AnsiString;
    }

}
#>